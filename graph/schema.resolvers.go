package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"vote.app/m/graph/model"
	"vote.app/m/router"
)

// VoteSelect is the resolver for the voteSelect field.
func (r *mutationResolver) VoteSelect(ctx context.Context, input model.VoteSelect) (*model.Result, error) {
	return router.VoteSelect(ctx, input)
}

// CreateVote is the resolver for the CreateVote field.
func (r *mutationResolver) CreateVote(ctx context.Context, input model.CreateVote) (*model.Result, error) {
	return router.CreateVote(ctx, input)
}

// EditVote is the resolver for the EditVote field.
func (r *mutationResolver) EditVote(ctx context.Context, input model.EditVote) (*model.Result, error) {
	return router.EditVote(ctx, input)
}

// DeleteVote is the resolver for the DeleteVote field.
func (r *mutationResolver) DeleteVote(ctx context.Context, input model.DeleteVote) (*model.Result, error) {
	return router.DeleteVote(ctx, input)
}

// VoteList is the resolver for the VoteList field.
func (r *queryResolver) VoteList(ctx context.Context) ([]*model.VoteList, error) {
	return router.VoteList(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
